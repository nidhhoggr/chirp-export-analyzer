#!/usr/bin/env node

const _ = require("lodash");
const ChirpAnalysis = require("./src/ChirpAnalysis");
const {
   isNumber,
} = require("./src/Utils");

(async () => {

  function help() {
    console.log("usage:\n\tanalyze export1.csv [export2.csv] [frequency]");
    console.log("environment variables:\n\tDEBUG=[int] (values greater than 0 with increments to increase verbosity)");
    console.log("\tIGNORE_POWER_DIFFERENCE=1 (set to ignore differences in the power)");
  }

  const firstFile = process.argv[2];
  const secondArg = process.argv[3]; 

  let debugLevel = 1;
  if (process.env.DEBUG) {
    debugLevel = parseInt(process.env.DEBUG);
  }
  
  const debug = (level) => {
    if (level <= debugLevel) {
      return function() {
        console.log("\n", ...arguments);
      }
    } else {
      return () => {}
    }
  }

  const opts = {debug};

  if (process.env.IGNORE_POWER_DIFFERENCE) {
    opts["ignore_difference_columns"] = ["Power"];
  }

  ca = new ChirpAnalysis();

  if (firstFile && !isNumber(secondArg)) {
    const secondFile = secondArg;
    const frequency = process.argv[4]; 
    debug(1)(`comparing ${firstFile} and ${secondFile}`);
    await ca.computeChannelMapping(firstFile, opts);
    await ca.computeChannelMapping(secondFile, opts);
    await ca.compareFiles([firstFile, secondFile], opts);
    await ca.statistics({frequency}, opts);

  } else if (firstFile) {
    const frequency = process.argv[3]; 
    debug(1)(`analyzing ${firstFile}`);
    await ca.computeChannelMapping(firstFile, opts);
    await ca.statistics({frequency}, opts);

  } else {

    help();
    process.exit(1);
  }
})();
